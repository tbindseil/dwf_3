TODO
1. make a linter
1a. camel case instead of snake case
2. whats the best way to deal with importing my own code? backend/index.ts line 2
3. vim buffers move to back
4. move method and entity constants to their own file (backend handlers dir)
5. rename handler dir to api
6. need to find a more generic way to verify that an object matches an interface (see post picture input in post picture api)
7. wrap " console.log(`blank is: ${blank}`); "


ok, i think i would like to go a different direction
I think the client should just stream (the differences), and the server should save

so,
canvas.click sends pixel update to server, but does not update the image
the server then receives and broadcasts to all clients, including the sender
this way, the server is ensuring a consistent order,
this will likely involve an ack on the client end to ensure that the updates are received before sending the next



color order
// red: 0xff, 0x00, 0x00, 0xff
// green: 0x00, 0xff, 0x00, 0xff
// blue: 0x00, 0x00, 0xff, 0xff



now, time for the queue stuff
I'll be working on put client api

what has to go there?

0. establish some mechanism for tracking (in memory) a picture's queue - done
1a. if no clients, add requested client and syncing client - done
1b. if clients exist, add requested client - done
2. when a client registers, the update queue is locked
looks like I need an update queue


before diving into the update queue, i checked on locking and was reminded that node is single threaded
what this means, not fully sure yet
maybe I'll just ignore locking for now, and see if I can understand what is happneing in the context of the code that i write
even after a little bit of code has been implemented i can see a problem

here is the sequence of events and yields that is problematic:
1. user registers
2. reading the file yields
3. while file is being read, another user posts an update to the same photo
4. well, as long as they register for the queue before blocking, things are ok
5. also post update needs to not block
6. but blocking to read input is weird


basically, this is gonna require some dedicated testing machinery


or maybe there are alternatives to this at a high level
like:
1. post every update to a database



before I even do any of the below, we need to
(upon post picture)
1. create an empty 100x100 png
2. upload it to s3
3. get key (assuming same bucket for now)
4. no no no
5. i don't wanna deal with aws yet

so,
0. for prototype pattern, create empty white png - done base_directory/pictures/default/solid_white.png
(upon post picture)
1. create an empty 100x100 png (use the prototype pattern here!) - done
2. save it to a directory on local machine - done
3. add location, ie local file system, and key, ie filename as picture name + user name + time stamp, to row in pictures db - done
3a. maybe add created by also? - done
4. upon get pictures, return those extra fields as well - done
5. have a get picture api wehre the actual file is transferred, this is now possible with the location field - done


hmmm, how do i handle this?
well, updates are commands, and they are sent through a chain of commands
so far, the chain is just two,

no,

the picture updater sends to all subscribed clients in addition to updating the master copy of the picture, as if the master copy of the picture is a subscribed client

so, there are two cases for when a new client subscribes to a picture
1. they are the first client
2. they are not the first client

if 1,
set everything up
* set of clients, initially it is this first subscriber and the master photo handler
** so, objects are:
*** client => subscribed client
          |=> master copy client

    client has an interface that is:
    handle update, subscribed client . handle update serializes and sends to the client (is that an ip address? probably a socket actually)
                   master copy client . handle update implements the same logic as a client does on the front end, ie it updates the photo
    initialize,    subscribed client . initialize will create a socket to send the serialized updates to the client
                   master copy client . intialize will open the photo from an accessor (local file system for now, s3 later)
if 2,
add the client to the set of clients, basically call initialize on the client, add it to the set, and we're good to go


so, put client should include enough info to initialize the client and the master copy client, this is the photo id, and the client ip address

lastly, how should the server respond to a client that is registering? I think they --should-- have to respond with a copy of the picture at the point in time of registration
  ie, the server will lock the picture, register the client, send the picture as a png to the client, then unlock

the only thing that is coming to mind as a little funky is that the client will have to get the picture setup and then start processing updates,
    (or it has to lock everything down till its done setting the picture up but that is obviously dumb)






ok, so now I have the ability to read input params,
to finalize the routing and handling of requests, i need to figure out errors
then, i need to figure out how to learn about objects that are posted/fetched/deleted etc for returning message to clients




orm and db management:
* maybe could translate ts models to python models, then just use sql alchemy
** this leaves the actual ORM to custom typescript stuff
** this also adds the translation of ts modules to python modules up to me also
*** this might be the deal breaker but is worth investigation
** could this be done by reading alembic from the database?


random text from index.ts
// now i have to connect to a database - TJTAG
// this will involve:
// 1. autogenerating database stuff based on models
// 2. connecting securely
//
// well, there are no good ORMs for typescript
//
// so what do i want it to do?
// given models (models/picture.ts for example):
// 1. I should be able to get the database looking right
// 1a. maybe just show differences?
// 2. I should be able to save and access objects, maybe autogenerate some basic queries
// 2a. nothing fancy, just get once and update on command
//
// connecting is a whole separate thing, that I probably should do first




        // temporary, test out db connection
        /*const query = 'SELECTy * from test_auto_increment where id = $1';
        const params = ['2'];
        db.query(query, params, (err: any, result: any) => {
            console.log(`err is ${err}`);
            console.log(`result is ${JSON.stringify(result)}`);

            // if (err) { throw new Error('error getting pictures'); }
        });*/

            /*
GET request received at /pictures
GetPictures.get_input
query is: function query(text, params, callback) {
    console.log("query is: ".concat(query));
    console.log("params are: ".concat(params));
    return pool.query(text, params, callback);
}
params are: 1
GetPictures.process
err is undefined
result is {"command":"SELECT","rowCount":1,"oid":null,"rows":[{"id":1,"name":"test_name"}],"fields":[{"name":"id","tableID":24588,"columnID":1,"dataTypeID":23,"dataTypeSize":4,"dataTypeModifier":-1,"format":"text"},{"name":"name","tableID":24588,"columnID":2,"dataTypeID":1043,"dataTypeSize":-1,"dataTypeModifier":-1,"format":"text"}],"_parsers":[null,null],"_types":{"_types":{"arrayParser":{},"builtins":{"BOOL":16,"BYTEA":17,"CHAR":18,"INT8":20,"INT2":21,"INT4":23,"REGPROC":24,"TEXT":25,"OID":26,"TID":27,"XID":28,"CID":29,"JSON":114,"XML":142,"PG_NODE_TREE":194,"SMGR":210,"PATH":602,"POLYGON":604,"CIDR":650,"FLOAT4":700,"FLOAT8":701,"ABSTIME":702,"RELTIME":703,"TINTERVAL":704,"CIRCLE":718,"MACADDR8":774,"MONEY":790,"MACADDR":829,"INET":869,"ACLITEM":1033,"BPCHAR":1042,"VARCHAR":1043,"DATE":1082,"TIME":1083,"TIMESTAMP":1114,"TIMESTAMPTZ":1184,"INTERVAL":1186,"TIMETZ":1266,"BIT":1560,"VARBIT":1562,"NUMERIC":1700,"REFCURSOR":1790,"REGPROCEDURE":2202,"REGOPER":2203,"REGOPERATOR":2204,"REGCLASS":2205,"REGTYPE":2206,"UUID":2950,"TXID_SNAPSHOT":2970,"PG_LSN":3220,"PG_NDISTINCT":3361,"PG_DEPENDENCIES":3402,"TSVECTOR":3614,"TSQUERY":3615,"GTSVECTOR":3642,"REGCONFIG":3734,"REGDICTIONARY":3769,"JSONB":3802,"REGNAMESPACE":4089,"REGROLE":4096}},"text":{},"binary":{}},"RowCtor":null,"rowAsArray":false}
        */




    //
    // I guess I can start with a server that can: - DONE
    // 1. receive updates and apply them to a master thing
    // 2. propagate updates
    // 3. register and unregister clients from photos
    // 4. send png of picture upon registration
    // 5. list pictures
    // 6. create pictures

    //
    // hmm, there is a crud app here and a registration service
    // i say this because the methods and routes are hard to name
    // no need to overthink it
    //



    // I think I could decode/inflate/etc a png file in a similar way to getting an image from below
    /*{
        fetch( 'https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png' )
            .then( (r: Response) => r.arrayBuffer() )
            .then( buffer => { // note this is already an ArrayBuffer
                               // there is no buffer.data here
                    const blob = new Blob( [ buffer ] );
                    const url = URL.createObjectURL( blob );
                    const img = document.getElementById( 'img' );
                    console.log('buffer is:');
                    console.log(buffer);
                    console.log('url is:');
                    console.log(url);
                    console.log('img is:');
                    console.log(img);
                    // img.src = url; I commented this out
                    // So the Blob can be Garbage Collected
                    // img.onload = e => URL.revokeObjectURL( url );
                    // ... do something else with 'buffer'
                    } );
    }*/

    //
    //
    // why even bother with pngs at this point,
    // just request to join a picture
    // then, server gives image at a point in time
    // and starts sending updates for anything after that
    //
    // it (drawing with canvas' draw functionality as events occur) (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
    // kind of leaves the question of how to shove something in that
    // was stuck in transit and is late. Ie how to draw something when
    // a later event has already been drawn?
    // Maybe just redraw from that event on? pretty mellow
    //
    // so I guess I'm drawing rectangles since that is easy





===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================



Ok, picking back up after 6 months at a new job

i want to switch to express instead of my own
i need to do:
* 



===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================

Ok, I haven't kept up with this file, but I have kept up with the proj
now, I am addressing the crux of the project up until this point
I need to synchronize the BroadcastMediator...

methods:
addClient:
* asynchronous in that it:
* certainly reads the raster from localPictureAccesor for the first client
* needs to supply the raster and any pending potentially, not sure how to do this yet
removeClient
* not marked as async, but it does yield control
** when the last client is removed, and picture sync client is closed 
*** it waits for the completion of its queue and then waits for the picture to be written
handleUpdate
* atomic (it doesn't yield control)
periodicWriteQueue
* writes every 30 seconds, instantiated and controlled by PictureSyncClient

questions:
* how many rasters are at play?


I think just reasoning these things out is enough for now

so what (asynchronous activity) absolutely has to happen?
1. read the raster upon adding first client
2. updating the raster when updates are received
3. writing the raster

right now, 2, 3 happen asynchronously to the raster that is initially read (ie the data isn't duplicated)
and, the raster is actually held onto by the mediator, a relic from when the mediator wrote
so there is only one raster that is active right now

And I have access to it from the mediator
but, I don't want to do it from there, the mediator is in charge of broadcasting, not client initialization
so, I could even initialize the client initialization client
or i could do that within the broadcast client

its also important to remember that even the readable copy isn't viable (without tracking updates) because it is only written every so often

I kinda wanna isolate the raster used within psc

then i could have a "current raster"
* updated in a locked fashion via a queue
* while at the same time, it can be sent to new clients
* and when it is sent to new clients, its locked, and updates are queued
* and maybe it can signal to the broadcast client for the changeover

why is the above a client? it handles updates and closes...

why is it one to one with broadcast clients?
well there is not notion of adding a new client to a client
so its easy to initialize it with a reference to the broadcast client that it will signal to

if i use multiple rasters (like one per client while they are syncing) it could be a good opportunity for a flyweight pattern?  maybe... not sure wtf i was rmembering here





=====

ok, so i sorta implemented a client initialiaztion client

now i need to synchronize access to the raster

can i use a raster registry?
or some kind of object to organize this?

I think I need to understand what happes to the arguments of emit

well, not necessarily the question at hand, but order is maintained when emitting event
... as long as websocket transport is used,
which is secondary and can be set to primary,
but would have some drawbacks
see note in backend/src/app.ts


well, to answer the original question, its not an asynchronous function so it must be?
I need to test this
or i could assume its not and copy the contents

I found out ArrayBuffer => Uint8ClampedArray is deep copy (see are_emit_args_deep_copied branch for experiment)
what about the other way?
this is happening in an unencapsulated way right now
I need to figure out the other way, decide on a plan to iron that out, and then see if the question (are emit args deep copied?) is still relevant
well, I figured out the other way
its obviously a copy operation, arraybuffer constructor takes only number of bytes, so it doesn't even know of the copied data

so since a 4000000 (4 * 1000 * 1000) size Uint8ClampedArray is deep copied to a buffer in ~2ms, I don't think its even necessary to worry
about where emit args are deep copied

Instead I think that I can just copy it from psc when creating cic


===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================


alright, lets convince myself this works/makes sense:

1. client_1 joins
2. tracked picture is created, psc client is added, and then psc is initialized. psc relinquishes control at this point.
3a. client_2 joins - just 3b (psc initialization finishes) because we skip creation of psc after client_1 joins
3b. psc initialization finishes
3bi. broadcast client (for client_1) is created and added to map. Also, syncrhonization with psc is requested
3bj. update occurs - i don't think this is possible with just client_1 with the restriction that we can't draw until we have the picture. but it could happen with client_X joining, its buffered into psc's work queue, and guaranteed to be add to raster before synchronization, because synchrnoization happens in the same queue. Since the associated broadcast client isn't added to map yet, it won't buffer the update, so we don't have to worry about it being done twice.
3bi1. syncrhonization occurs. This means psc sends bc the raster at a snapshot. That snapshot is the raster already updated with all updates that have happened up until syncrhonization was requested. Since syncrhonization is requested and bc starts buffering at the same time, we know all subsequent updates are buffered. These subsequent updates are also in the psc queue. then, bc will send the (copied) raster and all buffered updates. Lastly, it switches modes and starts immediately emitting updates instead of buffering them.
3bi2. update occurs - its buffered by bc and ultimately send out, in order, when syncrhonization occurs
3bi3. client_N joins - go to client_2 joins
3c. client_X sends update - impossible, it won't have the picture TODO do this in 
3d. client_1 leaves - this is a synchrous response. everythign is removed and closed and we start over, ie back to 1


===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================
===================================

ah man, another way to do this would be to have one queue in bm
make it a priority queue
then, enqueue all things there

picture sync events get prio 1 because we want clients to be able to start up as fast as possible
broadcast update events get 2
write picture events get 3


what do these look like?

bm has a priority queue
which is actually a map<number, Job[]>
priority -> ordered jobs

then, when looking for the next job, we just go 1-3 and get the first job in the first list we find

otherwise queue is the same

man i think its still hard to send the raster, unless its owned by bm
ok, so bm owns the raster

REMOVE_CLIENT_PRIORITY = 4
/// Hmm, how to schedule the removal of clients such that it is optimal (ie if add client is there, we put remove client first, and then somehow know to skip adding client)
/// ^^^ this is an optimization that can be done once we have a working test harness
// I think the way to do it would be to save (memoize) a map of client to a list of updates
// then do queue .cancel job(update)? hmm that leaves something to do as well

//        this.writingInterval = setInterval(() => {
//            if (this.dirty) {
//                this.unqueueWriteRaster();
//            }
//        }, this.writeIntervalMS);
bm.constructor() => {
    startInterval(30seconds, () => {
        // except this is really like a routine that can be installed once the 
        // the scheduling of this needs to be scrutinized
        // this could result in them building up, and repeating
        // well i guess repeating is handled by the dirty flag
        for (tp in trackedPictures) {
            queue.push(3, async () => {
                if (tp.raster && tp.dirty) {
                    await this.pictureAccessor.writeRaster(raster, filename)
                }
            });
        }
    });
}

bm.addclient (socket) => {
    queue.push(1, async () => {
        trackedPictures[filename].clientMap.add(socket)
        if (!this.trackedPictures[filename].raster) {
            this.trackedPictures[filename].raster = await this.pictureAccessor.getRaster(filename);
        }
        const copiedRaster = this.trackedPictures[filename].raster.copy()
        socket.emit('join_picture_response', copiedRaster);
    });
}

bm.removeClient (socket) => {
    queue.push(REMOVE_CLIENT_PRIORITY, async () => {
        trackedPicture[filename].clientMap.remove(socket)
        if (trackedPictures.clientMap.length === 0) {
            // enqueue write raster?
            // I don't think I even need to do that
            // any subsequent writes
            // if I delete the tracked picture here I do need to do it
            // because tracked picture is iterated over to schedule writes
            scheduleWrite(trackedPicture[filename].raster and .dirty)
            trackedPicgtures.remove(filename)
        }
    });
}

// WARNING this will bind hte dirty
bm.scheduleUpdate (raster, dirty) => {
    queue.push(3, async () => {
        if (raster && dirty) {
            await this.pictureAccessor.writeRaster(raster, filename)
        }
    });
}

bm.handleUpdate(fromSock, update) {
    queue.push(2, async () => {
        trackedPicture[filename].clientMap.forEach(c => {
            if (c.socket !== fromSocket) {
                c.handleUpdate(u)
            }
        });
    });
}



i think the psuedo code solution above is way clearer











